863a864,870
> 	local ifconfigFile
> 
> 	local OVS_VLAN_ID
> 	local OVS_PARENT
> 	local OVS_MACADDR
> 	local OVS_PATCH
> 
869a877,880
> 	ifconfigFile="/etc/sysconfig/network-scripts/ifcfg-$1"
> 	if ! source "$ifconfigFile" ; then
>         return
> 	fi
871c882
< 	#If the external interface has been remove.
---
> 	#If the external interface has been removed.
874c885
< 	if [ -z "$tmpdev" ]; then
---
> 	if [ -z "$tmpdev" ] && [ -z "$OVS_PARENT" ] && [ -z "$OVS_PATCH" ]; then
877c888
< 		rm /etc/sysconfig/network-scripts/ifcfg-$1
---
> 		rm "$ifconfigFile"
881,884c892,899
< 	ifconfigFile="/etc/sysconfig/network-scripts/ifcfg-$1"
< 	if ! source  "$ifconfigFile" ; then
<                 return
< 	fi
---
>     if [ ! -z "$OVS_PARENT" ] ; then
> 
> 		/bin/ovs-vsctl add-br $1 $OVS_PARENT $OVS_VLAN_ID
> 		if [ ! -z "$OVS_MACADDR" ] ; then
> 		    /bin/ovs-vsctl set int $1 mac=\"$OVS_MACADDR\"
> 		fi
> 
> 	else
901d915
< 		/bin/ovs-vsctl add-port $1 ${DEVICE}
903,906c917,918
< 		#Set MTU
< 		MTU_VALUE=`get_mtu_value ${DEVICE}`
< 		MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
< 		ifconfig ${DEVICE} ${MTU}
---
> 		setup_mtu ${DEVICE}
> 		/bin/ovs-vsctl add-port $1 ${DEVICE}
908a921
> 	setup_ovs_patch $1 "$OVS_PATCH"
911a925,926
>     fi
> 
949a965,969
> 	local OVS_PARENT
> 	local OVS_VIRTUAL
> 	local SLAVE_LIST
> 	local OVS_VLAN_ID
> 
951,954c971,979
< 	for slave in `synogetkeyvalue $ifconfigFile SLAVE_LIST`
< 	do
< 		/sbin/ip link set dev ${slave} down
< 	done
---
> 	if ! source "$ifconfigFile" ; then
>         return
> 	fi
> 
> 	if [ -z "${OVS_PARENT}" ] && [ -z "${OVS_VIRTUAL}" ]; then
> 		for slave in `echo ${SLAVE_LIST}`; do
> 			/sbin/ip link set dev ${slave} down
> 		done
> 	fi
956d980
< 	unset OVS_VLAN_ID
960c984
< 		if [ "$(grep OVS_VLAN_ID $ifconfigFile)" ]; then
---
> 		if [ ! -z "${OVS_VLAN_ID}" ]; then
981a1006,1008
> 	local ifconfigFile
> 	local OVS_PATCH
> 
988c1015
<                 return
---
>         return
1005,1008c1032
< 		#Set MTU
< 		MTU_VALUE=`get_mtu_value ${DEVICE}`
< 		MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
< 		ifconfig ${DEVICE} ${MTU}
---
> 		setup_mtu ${DEVICE}
1011a1036
> 	setup_ovs_patch $1 "$OVS_PATCH"
1039a1065,1078
> setup_ovs_patch()
> {
> 	local ifname="$1"
> 	local patchConfig="$2"
> 
> 	if [ ! -z "$patchConfig" ] ; then
> 		for pair in `echo "$patchConfig"`; do
> 			/bin/ovs-vsctl add-port $ifname ${pair%:*}
> 			/bin/ovs-vsctl set interface ${pair%:*} type=patch
> 			/bin/ovs-vsctl set interface ${pair%:*} options:peer=${pair#*:}
> 		done
> 	fi
> }
> 
1079a1119,1134
> gen_mtu_spec() {
> 	local DEVICE="$1"
> 	local MTU_VALUE
> 	local MTU
> 
> 	MTU_VALUE=`get_mtu_value ${DEVICE}`
> 	MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
> 	echo "${MTU}"
> }
> 
> setup_mtu() {
> 	local DEVICE="$1"
> 
> 	ifconfig ${DEVICE} $(gen_mtu_spec ${DEVICE})
> }
> 
1158,1159c1213
< 			unset IPADDR NETMASK IP MASK MTU MTU_VALUE
< 			MTU_VALUE=`get_mtu_value ${thisif}`
---
> 			unset IPADDR NETMASK IP MASK MTU
1164c1218
< 			MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
---
> 			MTU=$(gen_mtu_spec ${thisif})
1172,1175c1226
< 			unset MTU MTU_VALUE
< 			MTU_VALUE=`get_mtu_value ${thisif}`
< 			MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
< 			thisvalue="inet 0.0.0.0 ${MTU}"
---
> 			thisvalue="inet 0.0.0.0 $(gen_mtu_spec ${thisif})"
1400d1450
< 	local MTU_VALUE
1403d1452
< 	local MTU
1422d1470
< 		MTU_VALUE=`get_mtu_value ${ifn}`
1425d1472
< 		MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
1427c1474
< 			thisvalue="${IP} ${MASK} ${MTU}"
---
> 			thisvalue="${IP} ${MASK} $(gen_mtu_spec ${ifn})"
1601,1635c1648
< 	if [ ! -z "${dhcp_interfaces}" ]; then
< 		if [ -x /sbin/udhcpc ]; then
< 			for dhcpif in ${dhcp_interfaces}
< 			do
< 				ifconfig ${dhcpif} 0.0.0.0 up
< 				udhcp_flags="-p /etc/dhcpc/dhcpcd-${dhcpif}.pid -b -h `hostname`"
< 				${dhcp_program:-/sbin/udhcpc} -i ${dhcpif} ${udhcp_flags}
< 				sleep 1;
< 			done
< 		else
< 			dhcp_flags="-n ${dhcp_flags}"
< 			for dhcpif in ${dhcp_interfaces}
< 			do
< 				unset MTU MTU_VALUE
< 				MTU_VALUE=`get_mtu_value ${dhcpif}`
< 				MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
< 
< 				local iswifi=`echo "${dhcpif}" | grep "wlan" -c`
< 				# wlan's dhcp should be deal with synowifid
< 				if [ 1 -eq ${iswifi} ]; then
< 					continue
< 				fi
< 
< 				ifconfig ${dhcpif} 0.0.0.0 up
< 				sleep 1
< 
< 				if status dhcp-client IFACE=${dhcpif}; then
< 					logger -p user.warn "rc.network dhcp-client of [${dhcpif}] is already started. Do restart."
< 					/sbin/restart dhcp-client IFACE="${dhcpif}"
< 				else
< 					/sbin/start dhcp-client IFACE="${dhcpif}"
< 				fi
< 			done
< 		fi
< 	fi
---
> 	start_dhcp_client
1972a1986,1987
> 	local STAGE=$1
> 
1977c1992
< 				ifconfig ${dhcpif} 0.0.0.0 up
---
> 				ifconfig ${dhcpif} 0.0.0.0 up $(gen_mtu_spec ${dhcpif})
1979a1995
> 				sleep 1
1985,1988c2001
< 				unset MTU MTU_VALUE
< 				MTU_VALUE=`get_mtu_value ${dhcpif}`
< 				MTU="" ; [ -n "${MTU_VALUE}" ] && MTU="mtu ${MTU_VALUE}"
< 
---
> 				local MTU=$(gen_mtu_spec ${dhcpif})
1995c2008,2016
< 				/sbin/start dhcp-client IFACE="${dhcpif}" STAGE="rc" MTU="${MTU}"
---
> 				ifconfig ${dhcpif} 0.0.0.0 up $(gen_mtu_spec ${dhcpif})
> 				sleep 1
> 
> 				if status dhcp-client IFACE=${dhcpif}; then
> 					logger -p user.warn "rc.network dhcp-client of [${dhcpif}] is already started. Do restart."
> 					/sbin/restart dhcp-client IFACE="${dhcpif}" MTU="${MTU}" ${STAGE}
> 				else
> 					/sbin/start dhcp-client IFACE="${dhcpif}" MTU="${MTU}" ${STAGE}
> 				fi
2041c2062
< 	start_dhcp_client
---
> 	start_dhcp_client STAGE="rc"
